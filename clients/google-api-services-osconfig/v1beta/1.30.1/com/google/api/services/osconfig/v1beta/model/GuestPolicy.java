/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.osconfig.v1beta.model;

/**
 * An OS Config resource representing a guest configuration policy. These policies represent the
 * desired state for VM instance guest environments including packages to install or remove, package
 * repository configurations, and software to install.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud OS Config API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GuestPolicy extends com.google.api.client.json.GenericJson {

  /**
   * Required. Specifies the VM instances that are assigned to this policy. This allows you to
   * target sets or groups of VM instances by different parameters such as labels, names, OS, or
   * zones.
   *
   * If left empty, all VM instances underneath this policy are targeted.
   *
   * Conflict Management
   *
   * At the same level in the resource hierarchy (that is within a project), the service prevents
   * the creation of multiple policies that conflict with each other. If there are multiple policies
   * that specify the same config (eg. package, software recipe, repository, etc.), the service
   * ensures that no VM instance could potentially receive instructions from both policies. To
   * create multiple policies that specify different versions of a package or different configs for
   * different operating systems, each policy must be mutually exclusive in their targeting
   * according to labels, OS, or other criteria.
   *
   * Different configs are identified for conflicts in different ways. Packages are identified by
   * their name and the package manager(s) they target. Package repositories are identified by their
   * unique id where applicable. Some package managers don't have a unique identifier for
   * repositories and where that's the case, no uniqueness is validated by the service.
   *
   * Note that if OS Inventory is disabled, a VM instance cannot assign a policy that targets by OS
   * because the service sees the OS as unknown.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Assignment assignment;

  /**
   * Output only. Time this guest policy was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Description of the guest policy. Length of the description is limited to 1024 characters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * The etag for this guest policy. If this is provided on update, it must match the server's etag.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Required. Unique name of the resource in this project using one of the following forms:
   * `projects/{project_number}/guestPolicies/{guest_policy_id}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * A list of package repositories to configure on the VM instance. This is done before any other
   * configs are applied so they can use these repos. Package repositories are only configured if
   * the corresponding package manager(s) are available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PackageRepository> packageRepositories;

  /**
   * The software packages to be managed by this policy.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<SystemsManagementPackage> packages;

  /**
   * A list of Recipes to install on the VM instance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<SoftwareRecipe> recipes;

  /**
   * Output only. Last time this guest policy was updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Required. Specifies the VM instances that are assigned to this policy. This allows you to
   * target sets or groups of VM instances by different parameters such as labels, names, OS, or
   * zones.
   *
   * If left empty, all VM instances underneath this policy are targeted.
   *
   * Conflict Management
   *
   * At the same level in the resource hierarchy (that is within a project), the service prevents
   * the creation of multiple policies that conflict with each other. If there are multiple policies
   * that specify the same config (eg. package, software recipe, repository, etc.), the service
   * ensures that no VM instance could potentially receive instructions from both policies. To
   * create multiple policies that specify different versions of a package or different configs for
   * different operating systems, each policy must be mutually exclusive in their targeting
   * according to labels, OS, or other criteria.
   *
   * Different configs are identified for conflicts in different ways. Packages are identified by
   * their name and the package manager(s) they target. Package repositories are identified by their
   * unique id where applicable. Some package managers don't have a unique identifier for
   * repositories and where that's the case, no uniqueness is validated by the service.
   *
   * Note that if OS Inventory is disabled, a VM instance cannot assign a policy that targets by OS
   * because the service sees the OS as unknown.
   * @return value or {@code null} for none
   */
  public Assignment getAssignment() {
    return assignment;
  }

  /**
   * Required. Specifies the VM instances that are assigned to this policy. This allows you to
   * target sets or groups of VM instances by different parameters such as labels, names, OS, or
   * zones.
   *
   * If left empty, all VM instances underneath this policy are targeted.
   *
   * Conflict Management
   *
   * At the same level in the resource hierarchy (that is within a project), the service prevents
   * the creation of multiple policies that conflict with each other. If there are multiple policies
   * that specify the same config (eg. package, software recipe, repository, etc.), the service
   * ensures that no VM instance could potentially receive instructions from both policies. To
   * create multiple policies that specify different versions of a package or different configs for
   * different operating systems, each policy must be mutually exclusive in their targeting
   * according to labels, OS, or other criteria.
   *
   * Different configs are identified for conflicts in different ways. Packages are identified by
   * their name and the package manager(s) they target. Package repositories are identified by their
   * unique id where applicable. Some package managers don't have a unique identifier for
   * repositories and where that's the case, no uniqueness is validated by the service.
   *
   * Note that if OS Inventory is disabled, a VM instance cannot assign a policy that targets by OS
   * because the service sees the OS as unknown.
   * @param assignment assignment or {@code null} for none
   */
  public GuestPolicy setAssignment(Assignment assignment) {
    this.assignment = assignment;
    return this;
  }

  /**
   * Output only. Time this guest policy was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. Time this guest policy was created.
   * @param createTime createTime or {@code null} for none
   */
  public GuestPolicy setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Description of the guest policy. Length of the description is limited to 1024 characters.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Description of the guest policy. Length of the description is limited to 1024 characters.
   * @param description description or {@code null} for none
   */
  public GuestPolicy setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * The etag for this guest policy. If this is provided on update, it must match the server's etag.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * The etag for this guest policy. If this is provided on update, it must match the server's etag.
   * @param etag etag or {@code null} for none
   */
  public GuestPolicy setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Required. Unique name of the resource in this project using one of the following forms:
   * `projects/{project_number}/guestPolicies/{guest_policy_id}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Required. Unique name of the resource in this project using one of the following forms:
   * `projects/{project_number}/guestPolicies/{guest_policy_id}`.
   * @param name name or {@code null} for none
   */
  public GuestPolicy setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * A list of package repositories to configure on the VM instance. This is done before any other
   * configs are applied so they can use these repos. Package repositories are only configured if
   * the corresponding package manager(s) are available.
   * @return value or {@code null} for none
   */
  public java.util.List<PackageRepository> getPackageRepositories() {
    return packageRepositories;
  }

  /**
   * A list of package repositories to configure on the VM instance. This is done before any other
   * configs are applied so they can use these repos. Package repositories are only configured if
   * the corresponding package manager(s) are available.
   * @param packageRepositories packageRepositories or {@code null} for none
   */
  public GuestPolicy setPackageRepositories(java.util.List<PackageRepository> packageRepositories) {
    this.packageRepositories = packageRepositories;
    return this;
  }

  /**
   * The software packages to be managed by this policy.
   * @return value or {@code null} for none
   */
  public java.util.List<SystemsManagementPackage> getPackages() {
    return packages;
  }

  /**
   * The software packages to be managed by this policy.
   * @param packages packages or {@code null} for none
   */
  public GuestPolicy setPackages(java.util.List<SystemsManagementPackage> packages) {
    this.packages = packages;
    return this;
  }

  /**
   * A list of Recipes to install on the VM instance.
   * @return value or {@code null} for none
   */
  public java.util.List<SoftwareRecipe> getRecipes() {
    return recipes;
  }

  /**
   * A list of Recipes to install on the VM instance.
   * @param recipes recipes or {@code null} for none
   */
  public GuestPolicy setRecipes(java.util.List<SoftwareRecipe> recipes) {
    this.recipes = recipes;
    return this;
  }

  /**
   * Output only. Last time this guest policy was updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. Last time this guest policy was updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public GuestPolicy setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public GuestPolicy set(String fieldName, Object value) {
    return (GuestPolicy) super.set(fieldName, value);
  }

  @Override
  public GuestPolicy clone() {
    return (GuestPolicy) super.clone();
  }

}
